pub mod operations;
pub mod compress;
pub mod schedule;
pub mod constants;
pub mod hash;

pub fn sha512<let N: u32>(msg: [u8; N], msg_len: u32) -> [u8; 64] {
    hash::digest(msg, msg_len, constants::sha512_iv())
}

pub fn sha384<let N: u32>(msg: [u8; N], msg_len: u32) -> [u8; 48] {
    let hash = hash::digest(msg, msg_len, constants::sha384_iv());
    let mut h384: [u8; 48] = [0; 48];
    for i in 0..48 {
        h384[i] = hash[i];
    }
    h384
}

fn main(msg: [u8; 512], msg_len: u32) -> () {
    let hash = sha512(msg, msg_len);
    println(hash);
}

mod tests {
    use super::{sha512, sha384};

    #[test]
    fn test_sha512() {
        let msg: [u8; 113] = [
            0x15, 0x7b, 0xc1, 0x37, 0x9d, 0xf3, 0x69, 0x1f, 0x85, 0x4b, 0xa1, 0x07, 0x6d, 0xd3,
            0x39, 0x8f, 0xe5, 0x5b, 0x11, 0x97, 0x3d, 0xf9, 0x63, 0x29, 0x8e, 0x54, 0xba, 0x00,
            0x76, 0xcc, 0x32, 0x98, 0x4e, 0xb4, 0x0a, 0x70, 0xd6, 0x2c, 0x92, 0xe8, 0x5e, 0x15,
            0x7b, 0xc1, 0x37, 0x9d, 0xf3, 0x69, 0x1f, 0x85, 0x4b, 0xa1, 0x07, 0x6d, 0xd3, 0x39,
            0x8f, 0xe5, 0x5b, 0x11, 0x97, 0x3d, 0xf9, 0x63, 0x29, 0x8e, 0x54, 0xba, 0x00, 0x76,
            0xcc, 0x32, 0x98, 0x4e, 0xb4, 0x0a, 0x70, 0xd6, 0x2c, 0x82, 0xe8, 0x5e, 0x15, 0x7b,
            0xc1, 0x37, 0x9d, 0xf3, 0x69, 0x1f, 0x85, 0x4b, 0xa1, 0x07, 0x6d, 0xd3, 0x39, 0x8f,
            0xe5, 0x5b, 0x11, 0x97, 0x3d, 0xf9, 0x63, 0x29, 0x8e, 0x54, 0xba, 0x00, 0x76, 0xcc,
            0x32,
        ];
        let expected: [u8; 64] = [
            0x70, 0x7d, 0x35, 0x27, 0x30, 0x8e, 0x7c, 0x54, 0x4b, 0x77, 0xa6, 0xc6, 0x16, 0xab,
            0x2f, 0xd2, 0x0d, 0xcc, 0xb1, 0xf1, 0x35, 0x4d, 0x0b, 0x88, 0x20, 0x18, 0x92, 0xc0,
            0x01, 0x80, 0x4b, 0x64, 0x81, 0x82, 0xe4, 0x54, 0x29, 0x04, 0xa4, 0xd7, 0x37, 0x88,
            0x51, 0x18, 0xd0, 0x59, 0x9a, 0x0b, 0xdf, 0x7e, 0x46, 0x59, 0x91, 0x88, 0x9f, 0xa7,
            0x75, 0x26, 0xdc, 0xc5, 0xce, 0x7b, 0x9a, 0x2d,
        ];
        let hash = sha512(msg, 10);
        assert(hash == expected);
    }

    #[test]
    fn test_sha384() {
        let msg: [u8; 113] = [
            0x15, 0x7b, 0xc1, 0x37, 0x9d, 0xf3, 0x69, 0x1f, 0x85, 0x4b, 0xa1, 0x07, 0x6d, 0xd3,
            0x39, 0x8f, 0xe5, 0x5b, 0x11, 0x97, 0x3d, 0xf9, 0x63, 0x29, 0x8e, 0x54, 0xba, 0x00,
            0x76, 0xcc, 0x32, 0x98, 0x4e, 0xb4, 0x0a, 0x70, 0xd6, 0x2c, 0x92, 0xe8, 0x5e, 0x15,
            0x7b, 0xc1, 0x37, 0x9d, 0xf3, 0x69, 0x1f, 0x85, 0x4b, 0xa1, 0x07, 0x6d, 0xd3, 0x39,
            0x8f, 0xe5, 0x5b, 0x11, 0x97, 0x3d, 0xf9, 0x63, 0x29, 0x8e, 0x54, 0xba, 0x00, 0x76,
            0xcc, 0x32, 0x98, 0x4e, 0xb4, 0x0a, 0x70, 0xd6, 0x2c, 0x82, 0xe8, 0x5e, 0x15, 0x7b,
            0xc1, 0x37, 0x9d, 0xf3, 0x69, 0x1f, 0x85, 0x4b, 0xa1, 0x07, 0x6d, 0xd3, 0x39, 0x8f,
            0xe5, 0x5b, 0x11, 0x97, 0x3d, 0xf9, 0x63, 0x29, 0x8e, 0x54, 0xba, 0x00, 0x76, 0xcc,
            0x32,
        ];
        let expected: [u8; 48] = [
            0xe4, 0x3e, 0x5a, 0x58, 0xbc, 0xdc, 0x1d, 0x4d, 0x7d, 0xac, 0x58, 0xb4, 0x05, 0x1e,
            0x85, 0x6e, 0x65, 0x33, 0x8e, 0xa4, 0x4d, 0x36, 0x42, 0x8d, 0x94, 0x49, 0x84, 0x9c,
            0x89, 0xd0, 0xc6, 0xfc, 0x8c, 0x5c, 0x78, 0xdd, 0xa1, 0xc4, 0xa6, 0xca, 0x81, 0xc4,
            0x03, 0x2e, 0x98, 0xf7, 0x3c, 0xd3,
        ];
        let hash = sha384(msg, 10);
        assert(hash == expected);
    }

}
